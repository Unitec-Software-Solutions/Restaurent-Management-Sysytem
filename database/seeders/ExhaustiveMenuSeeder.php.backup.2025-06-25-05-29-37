<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\Organization;
use App\Models\Branch;
use App\Models\MenuCategory;
use App\Models\MenuItem;
use Carbon\Carbon;

/**
 * Exhaustive Menu Seeder
 * 
 * Creates comprehensive menu scenarios:
 * - Daily rotating menus (Mon-Sun)
 * - Special event menus
 * - Time-based availability (breakfast/lunch/dinner)
 * - Menu versioning with recipe changes
 * - Seasonal menus
 * - Dietary restriction options
 * - Multi-cuisine offerings
 * - Price variations and promotions
 */
class ExhaustiveMenuSeeder extends Seeder
{
    public function run(): void
    {
        $this->command->info('  📝 Creating menu configurations...');

        $organizations = Organization::with(['branches', 'subscriptionPlan'])->get();

        foreach ($organizations as $org) {
            $this->createMenusForOrganization($org);
        }

        $this->command->info("  ✅ Created comprehensive menu configurations");
    }

    private function createMenusForOrganization(Organization $org): void
    {
        $menuStrategy = $this->determineMenuStrategy($org);

        switch ($menuStrategy) {
            case 'simple_cafe':
                $this->createSimpleCafeMenu($org);
                break;
            case 'full_restaurant':
                $this->createFullRestaurantMenu($org);
                break;
            case 'seasonal_resort':
                $this->createSeasonalResortMenu($org);
                break;
            case 'food_truck':
                $this->createFoodTruckMenu($org);
                break;
            case 'international_chain':
                $this->createInternationalChainMenu($org);
                break;
            case 'franchise_standardized':
                $this->createFranchiseStandardizedMenu($org);
                break;
            default:
                $this->createStandardMenu($org);
                break;
        }

        // Add special event menus for all types
        $this->createSpecialEventMenus($org);
        
        // Add daily specials
        $this->createDailySpecials($org);
    }

    private function determineMenuStrategy(Organization $org): string
    {
        switch ($org->business_type) {
            case 'cafe':
                return 'simple_cafe';
            case 'resort_restaurant':
                return 'seasonal_resort';
            case 'food_truck':
                return 'food_truck';
            case 'international_chain':
                return 'international_chain';
            case 'restaurant_chain':
                return 'franchise_standardized';
            default:
                return 'full_restaurant';
        }
    }

    private function createSimpleCafeMenu(Organization $org): void
    {
        $categories = [
            ['name' => 'Coffee & Tea', 'type' => 'beverages', 'time_availability' => ['all_day']],
            ['name' => 'Fresh Juices & Smoothies', 'type' => 'beverages', 'time_availability' => ['all_day']],
            ['name' => 'Breakfast Items', 'type' => 'food', 'time_availability' => ['breakfast', 'brunch']],
            ['name' => 'Light Meals', 'type' => 'food', 'time_availability' => ['lunch', 'dinner']],
            ['name' => 'Pastries & Desserts', 'type' => 'desserts', 'time_availability' => ['all_day']],
        ];

        $menuItems = [
            // Coffee & Tea
            ['category' => 'Coffee & Tea', 'name' => 'Espresso', 'price' => 250, 'prep_time' => 2, 'ingredients' => ['espresso_beans'], 'allergens' => [], 'dietary' => ['vegan_option']],
            ['category' => 'Coffee & Tea', 'name' => 'Cappuccino', 'price' => 350, 'prep_time' => 3, 'ingredients' => ['espresso_beans', 'milk'], 'allergens' => ['dairy'], 'dietary' => ['vegetarian']],
            ['category' => 'Coffee & Tea', 'name' => 'Latte', 'price' => 380, 'prep_time' => 3, 'ingredients' => ['espresso_beans', 'milk'], 'allergens' => ['dairy'], 'dietary' => ['vegetarian']],
            ['category' => 'Coffee & Tea', 'name' => 'Ceylon Black Tea', 'price' => 200, 'prep_time' => 4, 'ingredients' => ['black_tea'], 'allergens' => [], 'dietary' => ['vegan', 'gluten_free']],
            ['category' => 'Coffee & Tea', 'name' => 'Green Tea', 'price' => 220, 'prep_time' => 4, 'ingredients' => ['green_tea'], 'allergens' => [], 'dietary' => ['vegan', 'gluten_free']],

            // Juices & Smoothies
            ['category' => 'Fresh Juices & Smoothies', 'name' => 'Fresh Orange Juice', 'price' => 300, 'prep_time' => 2, 'ingredients' => ['oranges'], 'allergens' => [], 'dietary' => ['vegan', 'gluten_free']],
            ['category' => 'Fresh Juices & Smoothies', 'name' => 'Mango Smoothie', 'price' => 450, 'prep_time' => 3, 'ingredients' => ['mango', 'yogurt', 'honey'], 'allergens' => ['dairy'], 'dietary' => ['vegetarian', 'gluten_free']],
            ['category' => 'Fresh Juices & Smoothies', 'name' => 'Green Smoothie', 'price' => 500, 'prep_time' => 4, 'ingredients' => ['spinach', 'banana', 'apple', 'coconut_milk'], 'allergens' => [], 'dietary' => ['vegan', 'gluten_free']],

            // Breakfast Items
            ['category' => 'Breakfast Items', 'name' => 'English Breakfast', 'price' => 850, 'prep_time' => 12, 'ingredients' => ['eggs', 'bacon', 'sausage', 'baked_beans', 'toast'], 'allergens' => ['gluten', 'eggs'], 'dietary' => []],
            ['category' => 'Breakfast Items', 'name' => 'Avocado Toast', 'price' => 650, 'prep_time' => 5, 'ingredients' => ['avocado', 'sourdough_bread', 'lime', 'salt'], 'allergens' => ['gluten'], 'dietary' => ['vegan']],
            ['category' => 'Breakfast Items', 'name' => 'Pancakes', 'price' => 550, 'prep_time' => 8, 'ingredients' => ['flour', 'eggs', 'milk', 'butter'], 'allergens' => ['gluten', 'dairy', 'eggs'], 'dietary' => ['vegetarian']],

            // Light Meals
            ['category' => 'Light Meals', 'name' => 'Caesar Salad', 'price' => 750, 'prep_time' => 6, 'ingredients' => ['lettuce', 'parmesan', 'croutons', 'caesar_dressing'], 'allergens' => ['dairy', 'gluten'], 'dietary' => ['vegetarian']],
            ['category' => 'Light Meals', 'name' => 'Grilled Chicken Sandwich', 'price' => 950, 'prep_time' => 10, 'ingredients' => ['chicken_breast', 'bread', 'lettuce', 'tomato'], 'allergens' => ['gluten'], 'dietary' => []],
            ['category' => 'Light Meals', 'name' => 'Veggie Wrap', 'price' => 650, 'prep_time' => 6, 'ingredients' => ['tortilla', 'hummus', 'vegetables'], 'allergens' => ['gluten'], 'dietary' => ['vegan']],

            // Pastries & Desserts
            ['category' => 'Pastries & Desserts', 'name' => 'Chocolate Croissant', 'price' => 320, 'prep_time' => 1, 'ingredients' => ['pastry', 'chocolate'], 'allergens' => ['gluten', 'dairy'], 'dietary' => ['vegetarian']],
            ['category' => 'Pastries & Desserts', 'name' => 'Cheesecake Slice', 'price' => 480, 'prep_time' => 2, 'ingredients' => ['cream_cheese', 'graham_crackers', 'sugar'], 'allergens' => ['dairy', 'gluten', 'eggs'], 'dietary' => ['vegetarian']],
        ];

        $this->createCategoriesAndItems($org, $categories, $menuItems);
    }

    private function createFullRestaurantMenu(Organization $org): void
    {
        $categories = [
            ['name' => 'Appetizers', 'type' => 'starters', 'time_availability' => ['lunch', 'dinner']],
            ['name' => 'Soups', 'type' => 'soups', 'time_availability' => ['lunch', 'dinner']],
            ['name' => 'Salads', 'type' => 'salads', 'time_availability' => ['lunch', 'dinner']],
            ['name' => 'Seafood', 'type' => 'main_course', 'time_availability' => ['lunch', 'dinner']],
            ['name' => 'Meat & Poultry', 'type' => 'main_course', 'time_availability' => ['lunch', 'dinner']],
            ['name' => 'Vegetarian', 'type' => 'main_course', 'time_availability' => ['lunch', 'dinner']],
            ['name' => 'Rice & Curry', 'type' => 'main_course', 'time_availability' => ['lunch', 'dinner']],
            ['name' => 'Desserts', 'type' => 'desserts', 'time_availability' => ['lunch', 'dinner']],
            ['name' => 'Beverages', 'type' => 'beverages', 'time_availability' => ['all_day']],
            ['name' => 'Wine & Spirits', 'type' => 'alcohol', 'time_availability' => ['lunch', 'dinner']],
        ];

        $menuItems = [
            // Appetizers
            ['category' => 'Appetizers', 'name' => 'Sri Lankan Fish Cutlets', 'price' => 450, 'prep_time' => 8, 'spice_level' => 'mild', 'ingredients' => ['fish', 'potato', 'spices'], 'allergens' => ['fish', 'gluten'], 'dietary' => []],
            ['category' => 'Appetizers', 'name' => 'Chicken Satay', 'price' => 650, 'prep_time' => 12, 'spice_level' => 'medium', 'ingredients' => ['chicken', 'coconut_milk', 'spices'], 'allergens' => [], 'dietary' => ['gluten_free']],
            ['category' => 'Appetizers', 'name' => 'Vegetable Spring Rolls', 'price' => 380, 'prep_time' => 6, 'spice_level' => 'mild', 'ingredients' => ['vegetables', 'spring_roll_wrapper'], 'allergens' => ['gluten'], 'dietary' => ['vegan']],

            // Soups
            ['category' => 'Soups', 'name' => 'Tom Yum Soup', 'price' => 550, 'prep_time' => 15, 'spice_level' => 'hot', 'ingredients' => ['shrimp', 'lemongrass', 'lime_leaves'], 'allergens' => ['shellfish'], 'dietary' => ['gluten_free']],
            ['category' => 'Soups', 'name' => 'Coconut Lentil Soup', 'price' => 420, 'prep_time' => 12, 'spice_level' => 'mild', 'ingredients' => ['lentils', 'coconut_milk', 'curry_leaves'], 'allergens' => [], 'dietary' => ['vegan', 'gluten_free']],

            // Salads
            ['category' => 'Salads', 'name' => 'Tropical Fruit Salad', 'price' => 480, 'prep_time' => 5, 'spice_level' => 'none', 'ingredients' => ['mango', 'pineapple', 'papaya'], 'allergens' => [], 'dietary' => ['vegan', 'gluten_free']],
            ['category' => 'Salads', 'name' => 'Grilled Chicken Salad', 'price' => 750, 'prep_time' => 8, 'spice_level' => 'mild', 'ingredients' => ['chicken', 'mixed_greens', 'dressing'], 'allergens' => [], 'dietary' => ['gluten_free']],

            // Seafood
            ['category' => 'Seafood', 'name' => 'Grilled Fish with Garlic Butter', 'price' => 1250, 'prep_time' => 18, 'spice_level' => 'mild', 'ingredients' => ['fresh_fish', 'garlic', 'butter'], 'allergens' => ['fish', 'dairy'], 'dietary' => ['gluten_free']],
            ['category' => 'Seafood', 'name' => 'Prawns Curry', 'price' => 1450, 'prep_time' => 20, 'spice_level' => 'medium', 'ingredients' => ['prawns', 'coconut_milk', 'curry_spices'], 'allergens' => ['shellfish'], 'dietary' => ['gluten_free']],
            ['category' => 'Seafood', 'name' => 'Crab Curry', 'price' => 1850, 'prep_time' => 25, 'spice_level' => 'hot', 'ingredients' => ['crab', 'coconut_milk', 'curry_spices'], 'allergens' => ['shellfish'], 'dietary' => ['gluten_free']],

            // Meat & Poultry
            ['category' => 'Meat & Poultry', 'name' => 'Chicken Curry', 'price' => 950, 'prep_time' => 22, 'spice_level' => 'medium', 'ingredients' => ['chicken', 'coconut_milk', 'spices'], 'allergens' => [], 'dietary' => ['gluten_free']],
            ['category' => 'Meat & Poultry', 'name' => 'Beef Steak', 'price' => 1650, 'prep_time' => 15, 'spice_level' => 'mild', 'ingredients' => ['beef', 'seasonings'], 'allergens' => [], 'dietary' => ['gluten_free']],
            ['category' => 'Meat & Poultry', 'name' => 'Pork Ribs', 'price' => 1350, 'prep_time' => 35, 'spice_level' => 'medium', 'ingredients' => ['pork_ribs', 'bbq_sauce'], 'allergens' => ['gluten'], 'dietary' => []],

            // Vegetarian
            ['category' => 'Vegetarian', 'name' => 'Dal Curry', 'price' => 450, 'prep_time' => 18, 'spice_level' => 'medium', 'ingredients' => ['lentils', 'coconut_milk', 'spices'], 'allergens' => [], 'dietary' => ['vegan', 'gluten_free']],
            ['category' => 'Vegetarian', 'name' => 'Vegetable Kottu', 'price' => 650, 'prep_time' => 12, 'spice_level' => 'hot', 'ingredients' => ['roti', 'vegetables', 'spices'], 'allergens' => ['gluten'], 'dietary' => ['vegan']],
            ['category' => 'Vegetarian', 'name' => 'Jackfruit Curry', 'price' => 550, 'prep_time' => 20, 'spice_level' => 'medium', 'ingredients' => ['jackfruit', 'coconut_milk', 'spices'], 'allergens' => [], 'dietary' => ['vegan', 'gluten_free']],

            // Rice & Curry
            ['category' => 'Rice & Curry', 'name' => 'Traditional Rice & Curry', 'price' => 850, 'prep_time' => 25, 'spice_level' => 'medium', 'ingredients' => ['rice', 'curry', 'vegetables'], 'allergens' => [], 'dietary' => ['gluten_free']],
            ['category' => 'Rice & Curry', 'name' => 'Biryani', 'price' => 1150, 'prep_time' => 30, 'spice_level' => 'medium', 'ingredients' => ['basmati_rice', 'meat', 'spices'], 'allergens' => [], 'dietary' => ['gluten_free']],

            // Desserts
            ['category' => 'Desserts', 'name' => 'Watalappan', 'price' => 350, 'prep_time' => 5, 'spice_level' => 'none', 'ingredients' => ['coconut_milk', 'jaggery', 'eggs'], 'allergens' => ['eggs'], 'dietary' => ['vegetarian', 'gluten_free']],
            ['category' => 'Desserts', 'name' => 'Chocolate Lava Cake', 'price' => 450, 'prep_time' => 8, 'spice_level' => 'none', 'ingredients' => ['chocolate', 'flour', 'eggs'], 'allergens' => ['gluten', 'dairy', 'eggs'], 'dietary' => ['vegetarian']],
            ['category' => 'Desserts', 'name' => 'Fresh Fruit Platter', 'price' => 380, 'prep_time' => 3, 'spice_level' => 'none', 'ingredients' => ['seasonal_fruits'], 'allergens' => [], 'dietary' => ['vegan', 'gluten_free']],

            // Beverages
            ['category' => 'Beverages', 'name' => 'Fresh Lime Juice', 'price' => 250, 'prep_time' => 2, 'spice_level' => 'none', 'ingredients' => ['lime', 'water', 'sugar'], 'allergens' => [], 'dietary' => ['vegan', 'gluten_free']],
            ['category' => 'Beverages', 'name' => 'King Coconut', 'price' => 300, 'prep_time' => 1, 'spice_level' => 'none', 'ingredients' => ['king_coconut'], 'allergens' => [], 'dietary' => ['vegan', 'gluten_free']],
            ['category' => 'Beverages', 'name' => 'Ceylon Tea', 'price' => 180, 'prep_time' => 3, 'spice_level' => 'none', 'ingredients' => ['black_tea'], 'allergens' => [], 'dietary' => ['vegan', 'gluten_free']],

            // Wine & Spirits
            ['category' => 'Wine & Spirits', 'name' => 'House Red Wine', 'price' => 1200, 'prep_time' => 1, 'spice_level' => 'none', 'ingredients' => ['red_wine'], 'allergens' => ['sulfites'], 'dietary' => ['vegan'], 'alcohol_content' => '12.5%'],
            ['category' => 'Wine & Spirits', 'name' => 'Local Arrack', 'price' => 400, 'prep_time' => 1, 'spice_level' => 'none', 'ingredients' => ['coconut_arrack'], 'allergens' => [], 'dietary' => ['vegan'], 'alcohol_content' => '35%'],
        ];

        $this->createCategoriesAndItems($org, $categories, $menuItems);
    }

    private function createSeasonalResortMenu(Organization $org): void
    {
        // Create different seasonal menus
        $this->createSeasonalMenu($org, 'High Season', ['December', 'January', 'February', 'March']);
        $this->createSeasonalMenu($org, 'Low Season', ['May', 'June', 'July', 'August', 'September']);
        $this->createSeasonalMenu($org, 'Monsoon Season', ['October', 'November']);
    }

    private function createSeasonalMenu(Organization $org, string $seasonName, array $months): void
    {
        $categories = [
            ['name' => $seasonName . ' - Seafood Specials', 'type' => 'seasonal_seafood', 'time_availability' => ['lunch', 'dinner'], 'seasonal' => true, 'season_months' => $months],
            ['name' => $seasonName . ' - Beach Bar', 'type' => 'seasonal_beverages', 'time_availability' => ['all_day'], 'seasonal' => true, 'season_months' => $months],
            ['name' => $seasonName . ' - BBQ Nights', 'type' => 'seasonal_bbq', 'time_availability' => ['dinner'], 'seasonal' => true, 'season_months' => $months],
        ];

        $menuItems = [];
        
        if ($seasonName === 'High Season') {
            $menuItems = [
                ['category' => $seasonName . ' - Seafood Specials', 'name' => 'Lobster Thermidor', 'price' => 3500, 'prep_time' => 30, 'special' => true],
                ['category' => $seasonName . ' - Beach Bar', 'name' => 'Tropical Sunset Cocktail', 'price' => 850, 'prep_time' => 5, 'special' => true],
                ['category' => $seasonName . ' - BBQ Nights', 'name' => 'Whole Fish BBQ', 'price' => 2200, 'prep_time' => 40, 'special' => true],
            ];
        } elseif ($seasonName === 'Low Season') {
            $menuItems = [
                ['category' => $seasonName . ' - Seafood Specials', 'name' => 'Local Fish Curry', 'price' => 1200, 'prep_time' => 25, 'special' => true],
                ['category' => $seasonName . ' - Beach Bar', 'name' => 'Fresh Coconut Water', 'price' => 300, 'prep_time' => 2, 'special' => true],
                ['category' => $seasonName . ' - BBQ Nights', 'name' => 'Grilled Chicken', 'price' => 950, 'prep_time' => 20, 'special' => true],
            ];
        }

        $this->createCategoriesAndItems($org, $categories, $menuItems);
    }

    private function createFoodTruckMenu(Organization $org): void
    {
        $categories = [
            ['name' => 'Street Food Favorites', 'type' => 'street_food', 'time_availability' => ['all_day']],
            ['name' => 'Quick Bites', 'type' => 'quick_service', 'time_availability' => ['all_day']],
            ['name' => 'Cold Beverages', 'type' => 'beverages', 'time_availability' => ['all_day']],
        ];

        $menuItems = [
            ['category' => 'Street Food Favorites', 'name' => 'Kottu Roti', 'price' => 450, 'prep_time' => 8, 'portable' => true],
            ['category' => 'Street Food Favorites', 'name' => 'Chicken Rolls', 'price' => 350, 'prep_time' => 6, 'portable' => true],
            ['category' => 'Street Food Favorites', 'name' => 'Fish Buns', 'price' => 120, 'prep_time' => 3, 'portable' => true],
            ['category' => 'Quick Bites', 'name' => 'Egg Hoppers', 'price' => 80, 'prep_time' => 4, 'portable' => true],
            ['category' => 'Quick Bites', 'name' => 'String Hoppers', 'price' => 60, 'prep_time' => 2, 'portable' => true],
            ['category' => 'Cold Beverages', 'name' => 'Iced Milo', 'price' => 200, 'prep_time' => 2, 'portable' => true],
            ['category' => 'Cold Beverages', 'name' => 'Fresh Lime Soda', 'price' => 150, 'prep_time' => 2, 'portable' => true],
        ];

        $this->createCategoriesAndItems($org, $categories, $menuItems);
    }

    private function createInternationalChainMenu(Organization $org): void
    {
        $categories = [
            ['name' => 'International Appetizers', 'type' => 'appetizers', 'time_availability' => ['lunch', 'dinner']],
            ['name' => 'Asian Fusion', 'type' => 'asian', 'time_availability' => ['lunch', 'dinner']],
            ['name' => 'European Classics', 'type' => 'european', 'time_availability' => ['lunch', 'dinner']],
            ['name' => 'American Favorites', 'type' => 'american', 'time_availability' => ['lunch', 'dinner']],
            ['name' => 'Global Desserts', 'type' => 'desserts', 'time_availability' => ['lunch', 'dinner']],
            ['name' => 'Premium Beverages', 'type' => 'beverages', 'time_availability' => ['all_day']],
        ];

        $menuItems = [
            // International Appetizers
            ['category' => 'International Appetizers', 'name' => 'Mediterranean Mezze Platter', 'price' => 1200, 'prep_time' => 10, 'cuisine' => 'mediterranean'],
            ['category' => 'International Appetizers', 'name' => 'Japanese Gyoza', 'price' => 850, 'prep_time' => 8, 'cuisine' => 'japanese'],
            ['category' => 'International Appetizers', 'name' => 'Mexican Nachos', 'price' => 750, 'prep_time' => 6, 'cuisine' => 'mexican'],

            // Asian Fusion
            ['category' => 'Asian Fusion', 'name' => 'Thai Green Curry', 'price' => 1350, 'prep_time' => 20, 'cuisine' => 'thai', 'spice_level' => 'hot'],
            ['category' => 'Asian Fusion', 'name' => 'Japanese Ramen', 'price' => 1150, 'prep_time' => 15, 'cuisine' => 'japanese'],
            ['category' => 'Asian Fusion', 'name' => 'Korean Bulgogi', 'price' => 1450, 'prep_time' => 18, 'cuisine' => 'korean'],

            // European Classics
            ['category' => 'European Classics', 'name' => 'Italian Risotto', 'price' => 1250, 'prep_time' => 25, 'cuisine' => 'italian'],
            ['category' => 'European Classics', 'name' => 'French Coq au Vin', 'price' => 1650, 'prep_time' => 35, 'cuisine' => 'french'],
            ['category' => 'European Classics', 'name' => 'German Schnitzel', 'price' => 1350, 'prep_time' => 12, 'cuisine' => 'german'],

            // American Favorites
            ['category' => 'American Favorites', 'name' => 'Classic Cheeseburger', 'price' => 950, 'prep_time' => 10, 'cuisine' => 'american'],
            ['category' => 'American Favorites', 'name' => 'BBQ Ribs', 'price' => 1550, 'prep_time' => 30, 'cuisine' => 'american'],
            ['category' => 'American Favorites', 'name' => 'Buffalo Wings', 'price' => 850, 'prep_time' => 12, 'cuisine' => 'american'],

            // Global Desserts
            ['category' => 'Global Desserts', 'name' => 'Italian Tiramisu', 'price' => 650, 'prep_time' => 5, 'cuisine' => 'italian'],
            ['category' => 'Global Desserts', 'name' => 'French Crème Brûlée', 'price' => 750, 'prep_time' => 8, 'cuisine' => 'french'],
            ['category' => 'Global Desserts', 'name' => 'American Cheesecake', 'price' => 550, 'prep_time' => 3, 'cuisine' => 'american'],

            // Premium Beverages
            ['category' => 'Premium Beverages', 'name' => 'Italian Espresso', 'price' => 350, 'prep_time' => 2, 'cuisine' => 'italian'],
            ['category' => 'Premium Beverages', 'name' => 'Japanese Matcha Latte', 'price' => 450, 'prep_time' => 4, 'cuisine' => 'japanese'],
            ['category' => 'Premium Beverages', 'name' => 'Turkish Coffee', 'price' => 300, 'prep_time' => 5, 'cuisine' => 'turkish'],
        ];

        $this->createCategoriesAndItems($org, $categories, $menuItems);
    }

    private function createFranchiseStandardizedMenu(Organization $org): void
    {
        // Standardized menu across all franchise locations
        $categories = [
            ['name' => 'Signature Starters', 'type' => 'appetizers', 'time_availability' => ['lunch', 'dinner'], 'standardized' => true],
            ['name' => 'Main Courses', 'type' => 'main_course', 'time_availability' => ['lunch', 'dinner'], 'standardized' => true],
            ['name' => 'Chef\'s Specials', 'type' => 'specials', 'time_availability' => ['dinner'], 'standardized' => true],
            ['name' => 'Desserts & Sweets', 'type' => 'desserts', 'time_availability' => ['lunch', 'dinner'], 'standardized' => true],
            ['name' => 'Beverages', 'type' => 'beverages', 'time_availability' => ['all_day'], 'standardized' => true],
        ];

        $menuItems = [
            // Signature Starters
            ['category' => 'Signature Starters', 'name' => 'Golden Spoon Sampler', 'price' => 950, 'prep_time' => 12, 'signature' => true],
            ['category' => 'Signature Starters', 'name' => 'Spiced Calamari Rings', 'price' => 750, 'prep_time' => 8, 'signature' => true],

            // Main Courses
            ['category' => 'Main Courses', 'name' => 'House Special Curry', 'price' => 1200, 'prep_time' => 25, 'signature' => true],
            ['category' => 'Main Courses', 'name' => 'Grilled Salmon', 'price' => 1650, 'prep_time' => 18, 'signature' => false],
            ['category' => 'Main Courses', 'name' => 'Chicken Tikka Masala', 'price' => 1150, 'prep_time' => 22, 'signature' => false],

            // Chef's Specials
            ['category' => 'Chef\'s Specials', 'name' => 'Premium Seafood Platter', 'price' => 2850, 'prep_time' => 35, 'signature' => true, 'premium' => true],
            ['category' => 'Chef\'s Specials', 'name' => 'Wagyu Beef Steak', 'price' => 3500, 'prep_time' => 20, 'signature' => true, 'premium' => true],

            // Desserts
            ['category' => 'Desserts & Sweets', 'name' => 'Signature Chocolate Tower', 'price' => 650, 'prep_time' => 8, 'signature' => true],
            ['category' => 'Desserts & Sweets', 'name' => 'Traditional Watalappan', 'price' => 350, 'prep_time' => 3, 'signature' => false],

            // Beverages
            ['category' => 'Beverages', 'name' => 'Golden Spoon Mocktail', 'price' => 450, 'prep_time' => 5, 'signature' => true],
            ['category' => 'Beverages', 'name' => 'Fresh Juice Selection', 'price' => 300, 'prep_time' => 3, 'signature' => false],
        ];

        $this->createCategoriesAndItems($org, $categories, $menuItems);
    }

    private function createSpecialEventMenus(Organization $org): void
    {
        $eventMenus = [
            ['event' => 'Valentine\'s Day', 'date_range' => ['2024-02-14', '2024-02-14']],
            ['event' => 'Christmas Special', 'date_range' => ['2024-12-20', '2024-12-26']],
            ['event' => 'New Year\'s Eve', 'date_range' => ['2024-12-31', '2024-12-31']],
            ['event' => 'Mother\'s Day', 'date_range' => ['2024-05-12', '2024-05-12']],
        ];

        foreach ($eventMenus as $eventMenu) {
            $this->createEventMenu($org, $eventMenu['event'], $eventMenu['date_range']);
        }
    }

    private function createEventMenu(Organization $org, string $eventName, array $dateRange): void
    {
        $category = MenuCategory::create([
            'organization_id' => $org->id,
            'name' => $eventName . ' Special Menu',
            'description' => 'Limited time special menu for ' . $eventName,
            'type' => 'event_special',
            'is_active' => true,
            'display_order' => 1,
            'time_availability' => json_encode(['dinner']),
            'date_availability' => json_encode($dateRange),
            'special_occasion' => $eventName,
        ]);

        $eventItems = $this->getEventMenuItems($eventName);
        
        foreach ($eventItems as $itemData) {
            MenuItem::create(array_merge($itemData, [
                'organization_id' => $org->id,
                'menu_category_id' => $category->id,
                'is_active' => true,
                'is_available' => true,
                'special_occasion' => $eventName,
                'date_availability' => json_encode($dateRange),
                'created_at' => now(),
                'updated_at' => now(),
            ]));
        }
    }

    private function getEventMenuItems(string $eventName): array
    {
        switch ($eventName) {
            case 'Valentine\'s Day':
                return [
                    ['name' => 'Romantic Candlelight Dinner for Two', 'price' => 4500, 'prep_time' => 45, 'description' => 'Three-course romantic dinner'],
                    ['name' => 'Chocolate Covered Strawberries', 'price' => 850, 'prep_time' => 5, 'description' => 'Fresh strawberries with Belgian chocolate'],
                    ['name' => 'Love Potion Cocktail', 'price' => 650, 'prep_time' => 6, 'description' => 'Romantic pink cocktail with rose petals'],
                ];
            case 'Christmas Special':
                return [
                    ['name' => 'Christmas Turkey Dinner', 'price' => 2850, 'prep_time' => 40, 'description' => 'Traditional roasted turkey with all trimmings'],
                    ['name' => 'Christmas Pudding', 'price' => 450, 'prep_time' => 8, 'description' => 'Traditional Christmas pudding with brandy sauce'],
                    ['name' => 'Mulled Wine', 'price' => 550, 'prep_time' => 10, 'description' => 'Warm spiced wine perfect for Christmas'],
                ];
            case 'New Year\'s Eve':
                return [
                    ['name' => 'Champagne & Caviar', 'price' => 3500, 'prep_time' => 5, 'description' => 'Premium champagne with imported caviar'],
                    ['name' => 'Midnight Celebration Platter', 'price' => 2200, 'prep_time' => 20, 'description' => 'Assorted appetizers for celebration'],
                ];
            default:
                return [];
        }
    }

    private function createDailySpecials(Organization $org): void
    {
        $days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
        
        foreach ($days as $day) {
            $category = MenuCategory::create([
                'organization_id' => $org->id,
                'name' => $day . ' Special',
                'description' => 'Daily special for ' . $day,
                'type' => 'daily_special',
                'is_active' => true,
                'display_order' => 10,
                'day_availability' => json_encode([$day]),
                'time_availability' => json_encode(['lunch', 'dinner']),
            ]);

            $special = $this->getDailySpecialItem($day);
            MenuItem::create(array_merge($special, [
                'organization_id' => $org->id,
                'menu_category_id' => $category->id,
                'is_active' => true,
                'is_available' => true,
                'daily_special' => true,
                'day_availability' => json_encode([$day]),
            ]));
        }
    }

    private function getDailySpecialItem(string $day): array
    {
        $specials = [
            'Monday' => ['name' => 'Monday Meat Special', 'price' => 950, 'prep_time' => 25, 'description' => 'Chef\'s choice meat dish'],
            'Tuesday' => ['name' => 'Tuesday Fish Curry', 'price' => 850, 'prep_time' => 20, 'description' => 'Fresh fish curry with rice'],
            'Wednesday' => ['name' => 'Wednesday Veggie Delight', 'price' => 650, 'prep_time' => 18, 'description' => 'Mixed vegetable curry'],
            'Thursday' => ['name' => 'Thursday Chicken Special', 'price' => 750, 'prep_time' => 22, 'description' => 'Spiced chicken with sides'],
            'Friday' => ['name' => 'Friday Seafood Platter', 'price' => 1250, 'prep_time' => 30, 'description' => 'Mixed seafood with rice'],
            'Saturday' => ['name' => 'Saturday BBQ Special', 'price' => 1150, 'prep_time' => 25, 'description' => 'Grilled meats and vegetables'],
            'Sunday' => ['name' => 'Sunday Family Feast', 'price' => 1850, 'prep_time' => 35, 'description' => 'Large portion family meal'],
        ];

        return $specials[$day];
    }

    private function createCategoriesAndItems(Organization $org, array $categories, array $menuItems): void
    {
        $categoryMap = [];

        // Create categories
        foreach ($categories as $index => $categoryData) {
            $category = MenuCategory::create([
                'organization_id' => $org->id,
                'name' => $categoryData['name'],
                'description' => 'Delicious ' . strtolower($categoryData['name']),
                'type' => $categoryData['type'],
                'is_active' => true,
                'display_order' => $index + 1,
                'time_availability' => json_encode($categoryData['time_availability']),
                'seasonal' => $categoryData['seasonal'] ?? false,
                'season_months' => isset($categoryData['season_months']) ? json_encode($categoryData['season_months']) : null,
                'standardized' => $categoryData['standardized'] ?? false,
            ]);

            $categoryMap[$categoryData['name']] = $category;
            $this->command->info("        ✓ Created category: {$category->name}");
        }

        // Create menu items
        foreach ($menuItems as $itemData) {
            $category = $categoryMap[$itemData['category']];
            
            MenuItem::create([
                'organization_id' => $org->id,
                'menu_category_id' => $category->id,
                'name' => $itemData['name'],
                'description' => $this->generateItemDescription($itemData),
                'price' => $itemData['price'],
                'prep_time_minutes' => $itemData['prep_time'],
                'is_active' => true,
                'is_available' => true,
                'ingredients' => json_encode($itemData['ingredients'] ?? []),
                'allergens' => json_encode($itemData['allergens'] ?? []),
                'dietary_info' => json_encode($itemData['dietary'] ?? []),
                'spice_level' => $itemData['spice_level'] ?? 'none',
                'cuisine_type' => $itemData['cuisine'] ?? 'local',
                'calories' => rand(200, 800),
                'nutritional_info' => json_encode($this->generateNutritionalInfo()),
                'signature_dish' => $itemData['signature'] ?? false,
                'premium_item' => $itemData['premium'] ?? false,
                'special_occasion' => $itemData['special_occasion'] ?? null,
                'portable' => $itemData['portable'] ?? false,
                'alcohol_content' => $itemData['alcohol_content'] ?? null,
            ]);
        }

        $this->command->info("        ✓ Created " . count($menuItems) . " menu items for {$org->name}");
    }

    private function generateItemDescription(array $itemData): string
    {
        $descriptions = [
            'A delicious and expertly prepared dish',
            'Made with fresh, high-quality ingredients',
            'Our chef\'s special preparation',
            'A customer favorite with authentic flavors',
            'Carefully crafted using traditional methods',
            'Fresh and flavorful with local ingredients',
            'A perfect blend of spices and flavors',
        ];

        return $descriptions[array_rand($descriptions)];
    }

    private function generateNutritionalInfo(): array
    {
        return [
            'protein' => rand(5, 40) . 'g',
            'carbs' => rand(10, 60) . 'g',
            'fat' => rand(2, 25) . 'g',
            'fiber' => rand(1, 15) . 'g',
            'sodium' => rand(100, 1500) . 'mg',
        ];
    }

    private function createStandardMenu(Organization $org): void
    {
        $categories = [
            ['name' => 'Appetizers', 'type' => 'appetizers', 'time_availability' => ['lunch', 'dinner']],
            ['name' => 'Main Courses', 'type' => 'mains', 'time_availability' => ['lunch', 'dinner']],
            ['name' => 'Soups & Salads', 'type' => 'soups_salads', 'time_availability' => ['lunch', 'dinner']],
            ['name' => 'Beverages', 'type' => 'beverages', 'time_availability' => ['all_day']],
            ['name' => 'Desserts', 'type' => 'desserts', 'time_availability' => ['all_day']],
        ];

        $menuItems = [
            // Appetizers
            ['category' => 'Appetizers', 'name' => 'Spring Rolls', 'price' => 8.50, 'prep_time' => 10],
            ['category' => 'Appetizers', 'name' => 'Chicken Wings', 'price' => 12.00, 'prep_time' => 15],
            ['category' => 'Appetizers', 'name' => 'Garlic Bread', 'price' => 6.00, 'prep_time' => 8],
            
            // Main Courses
            ['category' => 'Main Courses', 'name' => 'Grilled Chicken', 'price' => 18.50, 'prep_time' => 25],
            ['category' => 'Main Courses', 'name' => 'Beef Steak', 'price' => 24.00, 'prep_time' => 20],
            ['category' => 'Main Courses', 'name' => 'Fish & Chips', 'price' => 16.00, 'prep_time' => 18],
            
            // Soups & Salads
            ['category' => 'Soups & Salads', 'name' => 'Caesar Salad', 'price' => 10.00, 'prep_time' => 8],
            ['category' => 'Soups & Salads', 'name' => 'Tomato Soup', 'price' => 7.50, 'prep_time' => 12],
            
            // Beverages
            ['category' => 'Beverages', 'name' => 'Fresh Orange Juice', 'price' => 4.50, 'prep_time' => 3],
            ['category' => 'Beverages', 'name' => 'Coffee', 'price' => 3.00, 'prep_time' => 5],
            
            // Desserts
            ['category' => 'Desserts', 'name' => 'Chocolate Cake', 'price' => 8.00, 'prep_time' => 5],
            ['category' => 'Desserts', 'name' => 'Ice Cream', 'price' => 5.50, 'prep_time' => 2],
        ];

        $this->createCategoriesAndItems($org, $categories, $menuItems);
    }
}
