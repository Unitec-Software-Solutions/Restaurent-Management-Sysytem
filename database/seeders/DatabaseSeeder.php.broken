<?php

namespace Database\Seeders;

use App\Models\Organization;
use App\Models\Branch;
use App\Models\MenuCategory;
use App\Models\MenuItem;
use App\Models\Order;
use App\Models\OrderItem;
use App\Models\GoodsTransferNote;
use App\Models\GoodsTransferItem;
use App\Models\GrnMaster;
use App\Models\GrnItem;
use App\Models\ItemMaster;
use App\Models\Permission;
use App\Models\PurchaseOrder;
use App\Models\PurchaseOrderItem;
use App\Models\Payment;
use App\Models\PaymentAllocation;
use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;


class DatabaseSeeder extends Seeder
{
    protected $faker;

    public function run(): void
    {
        $this->command->info('🌱 Starting comprehensive database seeding...');
        
        // Clear existing data first (but safely)
        $this->command->info('🧹 Clearing existing data...');
        
        // Use database-agnostic approach for disabling foreign key checks
        $databaseType = DB::connection()->getDriverName();
        
        if ($databaseType === 'mysql') {
            DB::statement('SET FOREIGN_KEY_CHECKS=0;');
        } elseif ($databaseType === 'pgsql') {
            // PostgreSQL doesn't have a global foreign key disable, so we'll truncate in correct order
            $this->command->info('🔄 Using PostgreSQL-compatible truncation...');
        }
        
        // Clear tables in dependency order (reverse of creation order)
        $tablesToClear = [
            'payment_allocations', 'order_items', 'orders', 'menu_items', 
            'menu_categories', 'goods_transfer_items', 'goods_transfer_notes',
            'grn_items', 'grn_masters', 'purchase_order_items', 'purchase_orders',
            'item_masters', 'kitchen_stations', 'branches'
        ];
        
        foreach ($tablesToClear as $table) {
            try {
                if ($databaseType === 'mysql') {
                    DB::table($table)->truncate();
                } else {
                    // For PostgreSQL, use DELETE with RESTART IDENTITY
                    DB::table($table)->delete();
                    DB::statement("ALTER SEQUENCE {$table}_id_seq RESTART WITH 1");
                }
                $this->command->info("✅ Cleared table: {$table}");
            } catch (\Exception $e) {
                $this->command->warn("⚠️ Could not clear table {$table}: {$e->getMessage()}");
            }
        }
        
        // Re-enable foreign key checks
        if ($databaseType === 'mysql') {
            DB::statement('SET FOREIGN_KEY_CHECKS=1;');
        }
        
        // Run our stable, tested seeders only
        $this->command->info('🌱 Running core seeders...');
        
        // 1. Organizations first (creates kitchen stations automatically)
        $this->call(OrganizationSeeder::class);
        
        // 2. Branches (creates additional kitchen stations)
        $this->call(BranchSeeder::class);
        
        // 3. Item masters with valid references
        $this->call(ItemMasterSeeder::class);
        
        $this->command->info('✅ Core database seeding completed successfully!');
        $this->command->info('📊 Current state:');
        
        // Show summary
        $this->command->info('  - Organizations: ' . Organization::count());
        $this->command->info('  - Branches: ' . Branch::count());
        $this->command->info('  - Kitchen Stations: ' . \App\Models\KitchenStation::count());
        $this->command->info('  - Item Masters: ' . ItemMaster::count());
    }
        $tablesToClear = [
            'payment_allocations', 'order_items', 'orders', 'menu_items', 
            'kitchen_stations', 'reservations', 'tables', 'branches', 
            'organizations', 'subscription_plans', 'users', 'admins',
            'roles', 'permissions', 'item_masters', 'item_categories'
        ];
        
        foreach ($tablesToClear as $table) {
            if (DB::getSchemaBuilder()->hasTable($table)) {
                try {
                    if ($databaseType === 'pgsql') {
                        DB::statement("TRUNCATE TABLE {$table} RESTART IDENTITY CASCADE;");
                    } else {
                        DB::table($table)->truncate();
                    }
                } catch (\Exception $e) {
                    $this->command->warn("Could not clear table {$table}: " . $e->getMessage());
                }
            }
        }
        
        if ($databaseType === 'mysql') {
            DB::statement('SET FOREIGN_KEY_CHECKS=1;');
        }

        // Run basic seeders in correct dependency order
        $this->command->info('📦 Seeding core system data...');
        $this->call([
            SubscriptionPlanSeeder::class,
            EnhancedPermissionSeeder::class,
            AdminPermissionSeeder::class,
            OrganizationSeeder::class,  // This creates 1 organization with branches
            // BranchSeeder::class,     // Skip - OrganizationSeeder already creates branches
            ModulesTableSeeder::class,
            ItemCategorySeeder::class,
            ItemMasterSeeder::class,
            MenuItemSeeder::class,
            // KitchenStationSeeder::class, // Skip - OrganizationSeeder already creates stations
            TableSeeder::class,
            LoginSeeder::class,
            SuperAdminSeeder::class,
            AdminSeeder::class,
            UserSeeder::class,
            EmployeeSeeder::class,
            SupplierSeeder::class,
            ReservationSeeder::class,
        ]);

        // Get the created organizations for additional data
        $organizations = Organization::all();
        
        if ($organizations->isEmpty()) {
            $this->command->warn('⚠️ No organizations found after seeding. Creating additional test data...');
            return;
        }

        $this->command->info('🎯 Creating additional test data...');
        
        // Create additional test data for existing organizations
        foreach ($organizations as $organization) {
            $this->createAdditionalDataForOrganization($organization);
        }

        // Display success message
        $this->displaySuccessMessage();
    }

    /**
     * Display a success message after seeding is complete.
     */
    private function displaySuccessMessage(): void
    {
        $this->command->info('✅ Database seeding completed successfully!');
    }

    private function createAdditionalDataForOrganization($organization): void
    {
        $this->command->info("🏢 Creating data for: {$organization->name}");

        // Create branches first
        $branches = Branch::factory(3)->create(['organization_id' => $organization->id]);

        // Create menu categories
        $menuCategories = MenuCategory::factory(3)->create([
            'organization_id' => $organization->id,
            'branch_id' => $branches->random()->id
        ]);

        // Create item masters (inventory items)
        $itemMasters = ItemMaster::factory(10)->create([
            'organization_id' => $organization->id,
            'branch_id' => $branches->random()->id,
            'is_menu_item' => true
        ]);

        // Create menu items linked to item masters
        $menuItems = collect();
        foreach ($itemMasters->take(8) as $itemMaster) {
            $menuItem = MenuItem::factory()->create([
                'organization_id' => $organization->id,
                'branch_id' => $itemMaster->branch_id,
                'menu_category_id' => $menuCategories->random()->id,
                'item_master_id' => $itemMaster->id,
                'name' => $itemMaster->name,
                'price' => $itemMaster->selling_price,
                'description' => $itemMaster->description ?? "Delicious {$itemMaster->name}"
            ]);
            $menuItems->push($menuItem);
        }

        // Create orders with proper menu items
        $orders = Order::factory(5)->create([
            'branch_id' => $branches->random()->id,
            'organization_id' => $organization->id
        ]);

        // Create order items for each order
        $orders->each(function ($order) use ($menuItems, $itemMasters) {
            $orderMenuItems = $menuItems->where('branch_id', $order->branch_id)->take(3);

            if ($orderMenuItems->isEmpty()) {
                $orderMenuItems = $menuItems->take(3);
            }

            foreach ($orderMenuItems as $menuItem) {
                $inventoryItem = $itemMasters->find($menuItem->item_master_id);

                OrderItem::factory()->create([
                    'order_id' => $order->id,
                    'menu_item_id' => $menuItem->id,
                    'inventory_item_id' => $inventoryItem?->id,
                    'item_name' => $menuItem->name,
                    'unit_price' => $menuItem->price,
                    'quantity' => $this->faker->numberBetween(1, 3)
                ]);
            }

            // Update order total
            $orderTotal = $order->orderItems()->sum('total_price');
            $order->update(['total_amount' => $orderTotal]);
        });

        $gtns = GoodsTransferNote::factory(2)->create([
            'organization_id' => $organization->id,
            'from_branch_id' => $branches->random()->id,
            'to_branch_id' => $branches->random()->id
        ]);
        $gtns->each(function ($gtn) {
            GoodsTransferItem::factory(3)->create(['gtn_id' => $gtn->gtn_id]);
        });

        $grns = GrnMaster::factory(2)->create([
            'organization_id' => $organization->id,
            'branch_id' => $branches->random()->id
        ]);
        $grns->each(function ($grn) {
            GrnItem::factory(3)->create(['grn_id' => $grn->grn_id]);
        });

        Permission::factory(2)->create();
        $pos = PurchaseOrder::factory(2)->create([
            'organization_id' => $organization->id,
            'branch_id' => $branches->random()->id
        ]);
        $pos->each(function ($po) {
            PurchaseOrderItem::factory(3)->create(['po_id' => $po->po_id]);
        });
        Payment::factory(2)->create();
        PaymentAllocation::factory(2)->create();
    }
}