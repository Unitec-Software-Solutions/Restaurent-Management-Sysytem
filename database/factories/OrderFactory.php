<?php
// filepath: database/factories/OrderFactory.php

namespace Database\Factories;

use App\Models\Order;
use App\Models\Branch;
use App\Models\Organization;
use App\Models\Reservation;
use App\Models\Table;
use App\Models\User;
use Illuminate\Database\Eloquent\Factories\Factory;

class OrderFactory extends Factory
{
    protected $model = Order::class;

    public function definition(): array
    {
        // Get available branch and organization
        $branch = Branch::with('organization')->inRandomOrder()->first();
        
        if (!$branch) {
            // Create a basic branch and organization for testing
            $organization = Organization::firstOrCreate(
                ['email' => 'test@restaurant.com'],
                [
                    'name' => 'Test Restaurant',
                    'phone' => '+1234567890',
                    'address' => 'Test Address',
                    'is_active' => true,
                ]
            );

            $branch = Branch::firstOrCreate(
                ['name' => 'Test Branch'],
                [
                    'organization_id' => $organization->id,
                    'address' => 'Test Branch Address',
                    'phone' => '+1234567891',
                    'is_active' => true,
                ]
            );
        }

        $organization = $branch->organization;
        
        // Calculate amounts following business logic
        $subtotal = $this->faker->randomFloat(2, 500, 3000);
        $taxAmount = round($subtotal * 0.10, 2);
        $serviceCharge = round($subtotal * 0.05, 2);
        $discountAmount = $this->faker->randomFloat(2, 0, $subtotal * 0.2);
        $deliveryFee = $this->faker->randomElement([0, 50, 100, 150]); // Common delivery fees
        $totalAmount = $subtotal + $taxAmount + $serviceCharge + $deliveryFee - $discountAmount;

        return [
            'order_number' => null, // Will be auto-generated by the model
            'customer_name' => $this->faker->name(),
            'customer_phone' => $this->faker->phoneNumber(),
            'customer_email' => $this->faker->optional()->email(),
            'order_type' => $this->faker->randomElement([
                'dine_in', 'takeaway', 'delivery', 'reservation'
            ]),
            'status' => $this->faker->randomElement([
                'pending', 'confirmed', 'preparing', 'ready', 'completed', 'cancelled'
            ]),
            
            // Financial fields - using correct column names
            'subtotal' => $subtotal,
            'tax_amount' => $taxAmount,
            'discount_amount' => $discountAmount,
            'service_charge' => $serviceCharge,
            'delivery_fee' => $deliveryFee,
            'total_amount' => $totalAmount,
            
            // Compatibility fields
            'tax' => $taxAmount,
            'discount' => $discountAmount,
            'total' => $totalAmount,
            
            'currency' => 'LKR',
            'payment_status' => $this->faker->randomElement(['pending', 'paid', 'partially_paid', 'refunded']),
            'payment_method' => $this->faker->randomElement(['cash', 'card', 'mobile', 'bank_transfer']),
            'payment_reference' => $this->faker->optional()->uuid(),
            
            'notes' => $this->faker->optional()->sentence(),
            'order_date' => $this->faker->dateTimeBetween('-30 days', 'now'),
            'requested_time' => $this->faker->optional()->dateTimeBetween('now', '+7 days'),
            
            // Relationships
            'reservation_id' => null, // Keep null for basic orders
            'branch_id' => $branch->id,
            'organization_id' => $organization->id,
            'table_id' => null, // Keep null for basic orders
            'user_id' => null, // Keep null for basic orders
            'placed_by_admin' => $this->faker->boolean(30),
            
            // Delivery information for delivery orders
            'delivery_address' => $this->faker->optional()->address(),
            'delivery_instructions' => $this->faker->optional()->sentence(),
            'special_instructions' => $this->faker->optional()->sentence(),
        ];
    }

    /**
     * Configure the model factory for delivery orders
     */
    public function delivery(): static
    {
        return $this->state(fn (array $attributes) => [
            'order_type' => 'delivery',
            'delivery_address' => $this->faker->address(),
            'delivery_latitude' => $this->faker->latitude(-90, 90),
            'delivery_longitude' => $this->faker->longitude(-180, 180),
            'delivery_instructions' => $this->faker->sentence(),
            'delivery_fee' => $this->faker->randomElement([100, 150, 200]), // Non-zero delivery fee
        ]);
    }

    /**
     * Configure the model factory for dine-in orders
     */
    public function dineIn(): static
    {
        return $this->state(fn (array $attributes) => [
            'order_type' => 'dine_in',
            'delivery_fee' => 0,
            'delivery_address' => null,
            'delivery_instructions' => null,
        ]);
    }

    /**
     * Configure the model factory for takeaway orders
     */
    public function takeaway(): static
    {
        return $this->state(fn (array $attributes) => [
            'order_type' => 'takeaway',
            'delivery_fee' => 0,
            'delivery_address' => null,
            'delivery_instructions' => null,
            'table_id' => null,
        ]);
    }

    /**
     * Configure the model factory for completed orders
     */
    public function completed(): static
    {
        return $this->state(fn (array $attributes) => [
            'status' => 'completed',
            'payment_status' => 'paid',
            'confirmed_at' => $this->faker->dateTimeBetween('-7 days', '-1 hour'),
            'prepared_at' => $this->faker->dateTimeBetween('-6 days', '-30 minutes'),
            'completed_at' => $this->faker->dateTimeBetween('-6 days', 'now'),
        ]);
    }

    /**
     * Configure the model factory for pending orders
     */
    public function pending(): static
    {
        return $this->state(fn (array $attributes) => [
            'status' => 'pending',
            'payment_status' => 'pending',
            'confirmed_at' => null,
            'prepared_at' => null,
            'completed_at' => null,
        ]);
    }

    /**
     * Configure the model factory for specific branch
     */
    public function forBranch(int $branchId): static
    {
        $branch = Branch::with('organization')->find($branchId);
        
        return $this->state(fn (array $attributes) => [
            'branch_id' => $branchId,
            'organization_id' => $branch?->organization_id,
        ]);
    }

    /**
     * Configure the model factory with high value
     */
    public function highValue(): static
    {
        return $this->state(function (array $attributes) {
            $subtotal = $this->faker->randomFloat(2, 5000, 15000);
            $taxAmount = round($subtotal * 0.10, 2);
            $serviceCharge = round($subtotal * 0.05, 2);
            $discountAmount = $this->faker->randomFloat(2, 0, $subtotal * 0.15);
            $deliveryFee = $this->faker->randomElement([0, 200, 300]);
            $totalAmount = $subtotal + $taxAmount + $serviceCharge + $deliveryFee - $discountAmount;

            return [
                'subtotal' => $subtotal,
                'tax_amount' => $taxAmount,
                'discount_amount' => $discountAmount,
                'service_charge' => $serviceCharge,
                'delivery_fee' => $deliveryFee,
                'total_amount' => $totalAmount,
                'tax' => $taxAmount,
                'discount' => $discountAmount,
                'total' => $totalAmount,
            ];
        });
    }
}
